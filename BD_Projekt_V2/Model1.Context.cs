//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BD_Projekt_V2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SklepEntities : DbContext
    {
        public SklepEntities()
            : base("name=SklepEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dostawcy> Dostawcy { get; set; }
        public virtual DbSet<Kategoria> Kategoria { get; set; }
        public virtual DbSet<Klienci> Klienci { get; set; }
        public virtual DbSet<Pracownicy> Pracownicy { get; set; }
        public virtual DbSet<Produkty> Produkty { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<SzczegolyZamowienia> SzczegolyZamowienia { get; set; }
        public virtual DbSet<Zamowienia> Zamowienia { get; set; }
        public virtual DbSet<Zdjecia> Zdjecia { get; set; }
        public virtual DbSet<Administratorzy> Administratorzy { get; set; }
        public virtual DbSet<Pracownicy_z_Polski> Pracownicy_z_Polski { get; set; }
        public virtual DbSet<Serwisanci> Serwisanci { get; set; }
        public virtual DbSet<Koszyk_Przedmiot> Koszyk_Przedmiot { get; set; }
        public virtual DbSet<Egzemplarz> Egzemplarz { get; set; }
        public virtual DbSet<KoszykView> KoszykView { get; set; }
        public virtual DbSet<SzczegolyZamowieniaView> SzczegolyZamowieniaView { get; set; }
    
        public virtual int AddPracownik(string login, string haslo, string imie, string nazwisko, string uprawnienia, string tel_1, string tel_2, string fax, string email, string wWW, string kraj, string region, string miasto, string kodPocztowy)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var hasloParameter = haslo != null ?
                new ObjectParameter("Haslo", haslo) :
                new ObjectParameter("Haslo", typeof(string));
    
            var imieParameter = imie != null ?
                new ObjectParameter("Imie", imie) :
                new ObjectParameter("Imie", typeof(string));
    
            var nazwiskoParameter = nazwisko != null ?
                new ObjectParameter("Nazwisko", nazwisko) :
                new ObjectParameter("Nazwisko", typeof(string));
    
            var uprawnieniaParameter = uprawnienia != null ?
                new ObjectParameter("Uprawnienia", uprawnienia) :
                new ObjectParameter("Uprawnienia", typeof(string));
    
            var tel_1Parameter = tel_1 != null ?
                new ObjectParameter("Tel_1", tel_1) :
                new ObjectParameter("Tel_1", typeof(string));
    
            var tel_2Parameter = tel_2 != null ?
                new ObjectParameter("Tel_2", tel_2) :
                new ObjectParameter("Tel_2", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var wWWParameter = wWW != null ?
                new ObjectParameter("WWW", wWW) :
                new ObjectParameter("WWW", typeof(string));
    
            var krajParameter = kraj != null ?
                new ObjectParameter("Kraj", kraj) :
                new ObjectParameter("Kraj", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var miastoParameter = miasto != null ?
                new ObjectParameter("Miasto", miasto) :
                new ObjectParameter("Miasto", typeof(string));
    
            var kodPocztowyParameter = kodPocztowy != null ?
                new ObjectParameter("KodPocztowy", kodPocztowy) :
                new ObjectParameter("KodPocztowy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPracownik", loginParameter, hasloParameter, imieParameter, nazwiskoParameter, uprawnieniaParameter, tel_1Parameter, tel_2Parameter, faxParameter, emailParameter, wWWParameter, krajParameter, regionParameter, miastoParameter, kodPocztowyParameter);
        }
    
        public virtual int DeletePracownik(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePracownik", idParameter);
        }
    
        public virtual int ModifyPracownik(Nullable<int> id, string login, string haslo, string imie, string nazwisko, string uprawnienia, string tel_1, string tel_2, string fax, string email, string wWW, string kraj, string region, string miasto, string kodPocztowy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var hasloParameter = haslo != null ?
                new ObjectParameter("Haslo", haslo) :
                new ObjectParameter("Haslo", typeof(string));
    
            var imieParameter = imie != null ?
                new ObjectParameter("Imie", imie) :
                new ObjectParameter("Imie", typeof(string));
    
            var nazwiskoParameter = nazwisko != null ?
                new ObjectParameter("Nazwisko", nazwisko) :
                new ObjectParameter("Nazwisko", typeof(string));
    
            var uprawnieniaParameter = uprawnienia != null ?
                new ObjectParameter("Uprawnienia", uprawnienia) :
                new ObjectParameter("Uprawnienia", typeof(string));
    
            var tel_1Parameter = tel_1 != null ?
                new ObjectParameter("Tel_1", tel_1) :
                new ObjectParameter("Tel_1", typeof(string));
    
            var tel_2Parameter = tel_2 != null ?
                new ObjectParameter("Tel_2", tel_2) :
                new ObjectParameter("Tel_2", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var wWWParameter = wWW != null ?
                new ObjectParameter("WWW", wWW) :
                new ObjectParameter("WWW", typeof(string));
    
            var krajParameter = kraj != null ?
                new ObjectParameter("Kraj", kraj) :
                new ObjectParameter("Kraj", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var miastoParameter = miasto != null ?
                new ObjectParameter("Miasto", miasto) :
                new ObjectParameter("Miasto", typeof(string));
    
            var kodPocztowyParameter = kodPocztowy != null ?
                new ObjectParameter("KodPocztowy", kodPocztowy) :
                new ObjectParameter("KodPocztowy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyPracownik", idParameter, loginParameter, hasloParameter, imieParameter, nazwiskoParameter, uprawnieniaParameter, tel_1Parameter, tel_2Parameter, faxParameter, emailParameter, wWWParameter, krajParameter, regionParameter, miastoParameter, kodPocztowyParameter);
        }
    
        public virtual int Pracownicy_Insert(string login, string haslo, string imie, string nazwisko, string uprawnienia, string tel_1, string tel_2, string fax, string email, string wWW, string kraj, string region, string miasto, string kodPocztowy)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var hasloParameter = haslo != null ?
                new ObjectParameter("Haslo", haslo) :
                new ObjectParameter("Haslo", typeof(string));
    
            var imieParameter = imie != null ?
                new ObjectParameter("Imie", imie) :
                new ObjectParameter("Imie", typeof(string));
    
            var nazwiskoParameter = nazwisko != null ?
                new ObjectParameter("Nazwisko", nazwisko) :
                new ObjectParameter("Nazwisko", typeof(string));
    
            var uprawnieniaParameter = uprawnienia != null ?
                new ObjectParameter("Uprawnienia", uprawnienia) :
                new ObjectParameter("Uprawnienia", typeof(string));
    
            var tel_1Parameter = tel_1 != null ?
                new ObjectParameter("Tel_1", tel_1) :
                new ObjectParameter("Tel_1", typeof(string));
    
            var tel_2Parameter = tel_2 != null ?
                new ObjectParameter("Tel_2", tel_2) :
                new ObjectParameter("Tel_2", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var wWWParameter = wWW != null ?
                new ObjectParameter("WWW", wWW) :
                new ObjectParameter("WWW", typeof(string));
    
            var krajParameter = kraj != null ?
                new ObjectParameter("Kraj", kraj) :
                new ObjectParameter("Kraj", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var miastoParameter = miasto != null ?
                new ObjectParameter("Miasto", miasto) :
                new ObjectParameter("Miasto", typeof(string));
    
            var kodPocztowyParameter = kodPocztowy != null ?
                new ObjectParameter("KodPocztowy", kodPocztowy) :
                new ObjectParameter("KodPocztowy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pracownicy_Insert", loginParameter, hasloParameter, imieParameter, nazwiskoParameter, uprawnieniaParameter, tel_1Parameter, tel_2Parameter, faxParameter, emailParameter, wWWParameter, krajParameter, regionParameter, miastoParameter, kodPocztowyParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AddKlient(string login, string haslo, string imie, string nazwisko, string firma, string tel_1, string tel_2, string fax, string email, string wWW, string kraj, string region, string miasto, string kodPocztowy)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var hasloParameter = haslo != null ?
                new ObjectParameter("Haslo", haslo) :
                new ObjectParameter("Haslo", typeof(string));
    
            var imieParameter = imie != null ?
                new ObjectParameter("Imie", imie) :
                new ObjectParameter("Imie", typeof(string));
    
            var nazwiskoParameter = nazwisko != null ?
                new ObjectParameter("Nazwisko", nazwisko) :
                new ObjectParameter("Nazwisko", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("Firma", firma) :
                new ObjectParameter("Firma", typeof(string));
    
            var tel_1Parameter = tel_1 != null ?
                new ObjectParameter("Tel_1", tel_1) :
                new ObjectParameter("Tel_1", typeof(string));
    
            var tel_2Parameter = tel_2 != null ?
                new ObjectParameter("Tel_2", tel_2) :
                new ObjectParameter("Tel_2", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var wWWParameter = wWW != null ?
                new ObjectParameter("WWW", wWW) :
                new ObjectParameter("WWW", typeof(string));
    
            var krajParameter = kraj != null ?
                new ObjectParameter("Kraj", kraj) :
                new ObjectParameter("Kraj", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var miastoParameter = miasto != null ?
                new ObjectParameter("Miasto", miasto) :
                new ObjectParameter("Miasto", typeof(string));
    
            var kodPocztowyParameter = kodPocztowy != null ?
                new ObjectParameter("KodPocztowy", kodPocztowy) :
                new ObjectParameter("KodPocztowy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddKlient", loginParameter, hasloParameter, imieParameter, nazwiskoParameter, firmaParameter, tel_1Parameter, tel_2Parameter, faxParameter, emailParameter, wWWParameter, krajParameter, regionParameter, miastoParameter, kodPocztowyParameter);
        }
    
        public virtual int Add_Szczegoly_Zam(Nullable<int> zamId, Nullable<int> produktId, Nullable<int> liczbaProduktow, Nullable<float> rabat)
        {
            var zamIdParameter = zamId.HasValue ?
                new ObjectParameter("ZamId", zamId) :
                new ObjectParameter("ZamId", typeof(int));
    
            var produktIdParameter = produktId.HasValue ?
                new ObjectParameter("ProduktId", produktId) :
                new ObjectParameter("ProduktId", typeof(int));
    
            var liczbaProduktowParameter = liczbaProduktow.HasValue ?
                new ObjectParameter("LiczbaProduktow", liczbaProduktow) :
                new ObjectParameter("LiczbaProduktow", typeof(int));
    
            var rabatParameter = rabat.HasValue ?
                new ObjectParameter("Rabat", rabat) :
                new ObjectParameter("Rabat", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Szczegoly_Zam", zamIdParameter, produktIdParameter, liczbaProduktowParameter, rabatParameter);
        }
    
        public virtual int AddZamowienie(Nullable<int> klientId)
        {
            var klientIdParameter = klientId.HasValue ?
                new ObjectParameter("KlientId", klientId) :
                new ObjectParameter("KlientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddZamowienie", klientIdParameter);
        }
    
        public virtual int BindPracownikToZamowienie(Nullable<int> zamowienieId)
        {
            var zamowienieIdParameter = zamowienieId.HasValue ?
                new ObjectParameter("ZamowienieId", zamowienieId) :
                new ObjectParameter("ZamowienieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BindPracownikToZamowienie", zamowienieIdParameter);
        }
    
        public virtual int ModifyKlient(Nullable<int> id, string login, string haslo, string imie, string nazwisko, string firma, string nIP, string rEGON, string tel_1, string tel_2, string fax, string email, string wWW, string kraj, string region, string miasto, string kodPocztowy)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var hasloParameter = haslo != null ?
                new ObjectParameter("Haslo", haslo) :
                new ObjectParameter("Haslo", typeof(string));
    
            var imieParameter = imie != null ?
                new ObjectParameter("Imie", imie) :
                new ObjectParameter("Imie", typeof(string));
    
            var nazwiskoParameter = nazwisko != null ?
                new ObjectParameter("Nazwisko", nazwisko) :
                new ObjectParameter("Nazwisko", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("Firma", firma) :
                new ObjectParameter("Firma", typeof(string));
    
            var nIPParameter = nIP != null ?
                new ObjectParameter("NIP", nIP) :
                new ObjectParameter("NIP", typeof(string));
    
            var rEGONParameter = rEGON != null ?
                new ObjectParameter("REGON", rEGON) :
                new ObjectParameter("REGON", typeof(string));
    
            var tel_1Parameter = tel_1 != null ?
                new ObjectParameter("Tel_1", tel_1) :
                new ObjectParameter("Tel_1", typeof(string));
    
            var tel_2Parameter = tel_2 != null ?
                new ObjectParameter("Tel_2", tel_2) :
                new ObjectParameter("Tel_2", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var wWWParameter = wWW != null ?
                new ObjectParameter("WWW", wWW) :
                new ObjectParameter("WWW", typeof(string));
    
            var krajParameter = kraj != null ?
                new ObjectParameter("Kraj", kraj) :
                new ObjectParameter("Kraj", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            var miastoParameter = miasto != null ?
                new ObjectParameter("Miasto", miasto) :
                new ObjectParameter("Miasto", typeof(string));
    
            var kodPocztowyParameter = kodPocztowy != null ?
                new ObjectParameter("KodPocztowy", kodPocztowy) :
                new ObjectParameter("KodPocztowy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyKlient", idParameter, loginParameter, hasloParameter, imieParameter, nazwiskoParameter, firmaParameter, nIPParameter, rEGONParameter, tel_1Parameter, tel_2Parameter, faxParameter, emailParameter, wWWParameter, krajParameter, regionParameter, miastoParameter, kodPocztowyParameter);
        }
    
        public virtual ObjectResult<RaportKlientowBezZamowien_Result> RaportKlientowBezZamowien()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RaportKlientowBezZamowien_Result>("RaportKlientowBezZamowien");
        }
    
        public virtual ObjectResult<RaportKlientowOKtorzyNajwiecejWydali_Result> RaportKlientowOKtorzyNajwiecejWydali()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RaportKlientowOKtorzyNajwiecejWydali_Result>("RaportKlientowOKtorzyNajwiecejWydali");
        }
    
        public virtual ObjectResult<RaportKlientowONajwiększejLiczbieZamówień_Result> RaportKlientowONajwiększejLiczbieZamówień()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RaportKlientowONajwiększejLiczbieZamówień_Result>("RaportKlientowONajwiększejLiczbieZamówień");
        }
    
        public virtual ObjectResult<RaportPracownikówOrazLiczbyZamówień_Result> RaportPracownikówOrazLiczbyZamówień()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RaportPracownikówOrazLiczbyZamówień_Result>("RaportPracownikówOrazLiczbyZamówień");
        }
    
        public virtual ObjectResult<RaportZamówieńWRealizacji_Result> RaportZamówieńWRealizacji()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RaportZamówieńWRealizacji_Result>("RaportZamówieńWRealizacji");
        }
    
        public virtual int Update_Szczegoly_Zam(Nullable<int> szczegoly_ZamId, Nullable<int> zamId, Nullable<int> produktId, Nullable<decimal> cenaJednostkowa, Nullable<int> liczbaProduktow, Nullable<float> rabat)
        {
            var szczegoly_ZamIdParameter = szczegoly_ZamId.HasValue ?
                new ObjectParameter("Szczegoly_ZamId", szczegoly_ZamId) :
                new ObjectParameter("Szczegoly_ZamId", typeof(int));
    
            var zamIdParameter = zamId.HasValue ?
                new ObjectParameter("ZamId", zamId) :
                new ObjectParameter("ZamId", typeof(int));
    
            var produktIdParameter = produktId.HasValue ?
                new ObjectParameter("ProduktId", produktId) :
                new ObjectParameter("ProduktId", typeof(int));
    
            var cenaJednostkowaParameter = cenaJednostkowa.HasValue ?
                new ObjectParameter("CenaJednostkowa", cenaJednostkowa) :
                new ObjectParameter("CenaJednostkowa", typeof(decimal));
    
            var liczbaProduktowParameter = liczbaProduktow.HasValue ?
                new ObjectParameter("LiczbaProduktow", liczbaProduktow) :
                new ObjectParameter("LiczbaProduktow", typeof(int));
    
            var rabatParameter = rabat.HasValue ?
                new ObjectParameter("Rabat", rabat) :
                new ObjectParameter("Rabat", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Szczegoly_Zam", szczegoly_ZamIdParameter, zamIdParameter, produktIdParameter, cenaJednostkowaParameter, liczbaProduktowParameter, rabatParameter);
        }
    
        public virtual int MoveItemsFromCartToOrder(Nullable<int> userId, Nullable<int> orderId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveItemsFromCartToOrder", userIdParameter, orderIdParameter);
        }
    }
}
